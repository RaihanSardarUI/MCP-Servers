---
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="Add Server - MCP Directory">
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold">Add Your MCP Server</h1>
        <p class="text-base-content/70 mt-2">
          Share your MCP server with the community
        </p>
      </div>

      <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
          <form id="server-form" class="space-y-6">
            <!-- GitHub URL -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">GitHub Repository URL</span>
                <span class="label-text-alt">Optional - auto-fills data</span>
              </label>
              <input 
                type="url" 
                id="github-url"
                name="github-url"
                class="input input-bordered w-full"
                placeholder="https://github.com/username/repo"
              />
              <label class="label">
                <span class="label-text-alt">We'll automatically fetch repository information</span>
              </label>
              <button 
                type="button" 
                class="btn btn-outline btn-sm mt-2"
                onclick="fetchGitHubData()"
                id="fetch-btn"
              >
                <span class="loading loading-spinner loading-sm hidden" id="fetch-loading"></span>
                Fetch Repository Data
              </button>
            </div>

            <div class="divider">OR fill manually</div>

            <!-- Server Name -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Server Name *</span>
              </label>
              <input 
                type="text" 
                id="name"
                name="name"
                required
                class="input input-bordered w-full"
                placeholder="My Awesome MCP Server"
              />
            </div>

            <!-- Server Slug -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">URL Slug *</span>
              </label>
              <input 
                type="text" 
                id="slug"
                name="slug"
                required
                class="input input-bordered w-full"
                placeholder="my-awesome-server"
                pattern="[a-z0-9-]+"
              />
              <label class="label">
                <span class="label-text-alt">Only lowercase letters, numbers, and hyphens</span>
              </label>
            </div>

            <!-- Description -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Description</span>
              </label>
              <textarea 
                id="description"
                name="description"
                class="textarea textarea-bordered w-full h-24"
                placeholder="Describe what your MCP server does..."
              ></textarea>
            </div>

            <!-- Logo URL -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Logo URL</span>
              </label>
              <input 
                type="url" 
                id="logo-url"
                name="logo-url"
                class="input input-bordered w-full"
                placeholder="https://example.com/logo.png"
              />
            </div>

            <!-- Website URL -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Website URL</span>
              </label>
              <input 
                type="url" 
                id="website-url"
                name="website-url"
                class="input input-bordered w-full"
                placeholder="https://example.com"
              />
            </div>

            <!-- Tags -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Tags</span>
              </label>
              <input 
                type="text" 
                id="tags"
                name="tags"
                class="input input-bordered w-full"
                placeholder="python, ai, tool, npm (comma separated)"
              />
              <label class="label">
                <span class="label-text-alt">Separate tags with commas</span>
              </label>
            </div>

            <!-- Preview -->
            <div id="preview-card" class="card bg-base-200 hidden">
              <div class="card-body">
                <h3 class="card-title">Preview</h3>
                <div class="flex items-start gap-4">
                  <div class="avatar">
                    <div class="w-12 h-12 rounded-lg">
                      <img id="preview-logo" src="" alt="Server logo" />
                    </div>
                  </div>
                  <div class="flex-1">
                    <h4 class="font-bold" id="preview-name">Server Name</h4>
                    <p class="text-sm text-base-content/70" id="preview-description">Description</p>
                    <div class="flex flex-wrap gap-1 mt-2" id="preview-tags">
                      <!-- Tags will be populated here -->
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="form-control">
              <button 
                type="submit" 
                class="btn btn-primary w-full"
                id="submit-btn"
              >
                <span class="loading loading-spinner loading-sm hidden" id="submit-loading"></span>
                Add Server
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Check authentication
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/auth/login?return=' + encodeURIComponent(window.location.pathname);
      return;
    }

    // Auto-generate slug from name
    const nameInput = document.getElementById('name');
    const slugInput = document.getElementById('slug');
    
    nameInput.addEventListener('input', (e) => {
      const slug = e.target.value
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');
      slugInput.value = slug;
      updatePreview();
    });

    // Update preview on input changes
    const inputs = ['name', 'description', 'logo-url', 'tags'];
    inputs.forEach(id => {
      document.getElementById(id).addEventListener('input', updatePreview);
    });

    // Form submission
    document.getElementById('server-form').addEventListener('submit', handleSubmit);
  });

  async function fetchGitHubData() {
    const githubUrl = document.getElementById('github-url').value;
    if (!githubUrl) {
      showToast('Please enter a GitHub URL', 'error');
      return;
    }

    const fetchBtn = document.getElementById('fetch-btn');
    const loadingSpinner = document.getElementById('fetch-loading');
    
    fetchBtn.disabled = true;
    loadingSpinner.classList.remove('hidden');

    try {
      // Parse GitHub URL
      const urlMatch = githubUrl.match(/github\.com\/([^\/]+)\/([^\/]+)/);
      if (!urlMatch) {
        throw new Error('Invalid GitHub URL');
      }

      const [, owner, repo] = urlMatch;
      const cleanRepo = repo.replace(/\.git$/, '');

      // Fetch repository data
      const response = await fetch(`https://api.github.com/repos/${owner}/${cleanRepo}`);
      if (!response.ok) {
        throw new Error('Repository not found');
      }

      const data = await response.json();

      // Fill form with GitHub data
      document.getElementById('name').value = data.name || '';
      document.getElementById('slug').value = data.name?.toLowerCase().replace(/[^a-z0-9]+/g, '-') || '';
      document.getElementById('description').value = data.description || '';
      document.getElementById('website-url').value = data.homepage || '';
      document.getElementById('tags').value = data.topics?.join(', ') || '';

      // Set a default logo (GitHub avatar)
      document.getElementById('logo-url').value = data.owner?.avatar_url || '';

      updatePreview();
      showToast('Repository data fetched successfully!', 'success');
    } catch (error) {
      console.error('Error fetching GitHub data:', error);
      showToast(error.message || 'Error fetching repository data', 'error');
    } finally {
      fetchBtn.disabled = false;
      loadingSpinner.classList.add('hidden');
    }
  }

  function updatePreview() {
    const name = document.getElementById('name').value;
    const description = document.getElementById('description').value;
    const logoUrl = document.getElementById('logo-url').value;
    const tags = document.getElementById('tags').value;

    if (!name) {
      document.getElementById('preview-card').classList.add('hidden');
      return;
    }

    document.getElementById('preview-card').classList.remove('hidden');
    document.getElementById('preview-name').textContent = name;
    document.getElementById('preview-description').textContent = description || 'No description provided';
    
    const logoImg = document.getElementById('preview-logo');
    logoImg.src = logoUrl || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(name)}`;

    // Update tags
    const tagsContainer = document.getElementById('preview-tags');
    tagsContainer.innerHTML = '';
    if (tags) {
      tags.split(',').forEach(tag => {
        const tagEl = document.createElement('span');
        tagEl.className = 'badge badge-outline badge-sm';
        tagEl.textContent = tag.trim();
        tagsContainer.appendChild(tagEl);
      });
    }
  }

  async function handleSubmit(e) {
    e.preventDefault();
    
    const token = localStorage.getItem('token');
    const submitBtn = document.getElementById('submit-btn');
    const loadingSpinner = document.getElementById('submit-loading');
    
    submitBtn.disabled = true;
    loadingSpinner.classList.remove('hidden');

    try {
      const formData = new FormData(e.target);
      const serverData = {
        name: formData.get('name'),
        slug: formData.get('slug'),
        description: formData.get('description'),
        logo_url: formData.get('logo-url'),
        website_url: formData.get('website-url'),
        github_repo_url: formData.get('github-url'),
        tags: formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag)
      };

      // Validate required fields
      if (!serverData.name || !serverData.slug) {
        throw new Error('Name and slug are required');
      }

      const response = await fetch('/api/servers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(serverData)
      });

      const data = await response.json();

      if (data.success) {
        showToast('Server added successfully!', 'success');
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 2000);
      } else {
        throw new Error(data.error || 'Failed to add server');
      }
    } catch (error) {
      console.error('Error adding server:', error);
      showToast(error.message || 'Error adding server', 'error');
    } finally {
      submitBtn.disabled = false;
      loadingSpinner.classList.add('hidden');
    }
  }

  function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast toast-top toast-end`;
    toast.innerHTML = `
      <div class="alert alert-${type === 'success' ? 'success' : 'error'}">
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }
</script> 