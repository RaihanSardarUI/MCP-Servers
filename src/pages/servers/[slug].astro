---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getDatabase, getServerBySlug } from '../../lib/database.js';

export const prerender = false;

const { slug } = Astro.params;
const server = await getServerBySlug(getDatabase(Astro.locals.runtime.env), slug);

if (!server) {
  return Astro.redirect('/404');
}

// Parse tags from JSON string
const parsedServer = {
  ...server,
  tags: server.tags ? JSON.parse(server.tags) : []
};
---

<BaseLayout title={`${parsedServer.name} - MCP Directory`} description={parsedServer.description}>
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="bg-gradient-to-r from-primary to-secondary text-white rounded-lg p-8 mb-8">
      <div class="flex items-start gap-6">
        <div class="avatar">
          <div class="w-20 h-20 rounded-xl">
            <img 
              src={parsedServer.logo_url || `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(parsedServer.name)}`} 
              alt={parsedServer.name} 
            />
          </div>
        </div>
        
        <div class="flex-1">
          <h1 class="text-4xl font-bold mb-2">{parsedServer.name}</h1>
          <p class="text-lg opacity-90 mb-4">{parsedServer.description}</p>
          
          <div class="flex flex-wrap gap-4 text-sm">
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <span>{parsedServer.stars} stars</span>
            </div>
            
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414L2.586 7l3.707-3.707a1 1 0 011.414 0z" clip-rule="evenodd"/>
              </svg>
              <span>{parsedServer.forks} forks</span>
            </div>
            
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              <span>Added {new Date(parsedServer.created_at).toLocaleDateString()}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Main Content -->
      <div class="lg:col-span-2 space-y-8">
        <!-- Quick Actions -->
        <div class="flex flex-wrap gap-3">
          {parsedServer.github_repo_url && (
            <a 
              href={parsedServer.github_repo_url} 
              target="_blank" 
              rel="noopener noreferrer"
              class="btn btn-outline"
            >
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"/>
              </svg>
              View on GitHub
            </a>
          )}
          
          {parsedServer.website_url && (
            <a 
              href={parsedServer.website_url} 
              target="_blank" 
              rel="noopener noreferrer"
              class="btn btn-outline"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              Visit Website
            </a>
          )}
          
          <button class="btn btn-outline" onclick="shareServer()">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
            </svg>
            Share
          </button>
        </div>

        <!-- README Section -->
        {parsedServer.readme_markdown && (
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h2 class="card-title text-2xl mb-4">README</h2>
              <div class="prose max-w-none" id="readme-content">
                {parsedServer.readme_markdown}
              </div>
            </div>
          </div>
        )}

        <!-- Installation Instructions -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h2 class="card-title text-2xl mb-4">Installation</h2>
            <div class="space-y-4">
              {parsedServer.github_repo_url && (
                <div>
                  <h3 class="text-lg font-semibold mb-2">Clone from GitHub</h3>
                  <div class="mockup-code">
                    <pre data-prefix="$"><code>git clone {parsedServer.github_repo_url}</code></pre>
                  </div>
                </div>
              )}
              
              <div>
                <h3 class="text-lg font-semibold mb-2">Using with MCP Client</h3>
                <p class="text-base-content/70 mb-2">
                  Add this server to your MCP client configuration:
                </p>
                <div class="mockup-code">
                  <pre data-prefix=""><code>{`{
  "servers": {
    "${parsedServer.slug}": {
      "command": "path/to/server",
      "args": []
    }
  }
}`}</code></pre>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Sidebar -->
      <div class="space-y-6">
        <!-- Server Info -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h3 class="card-title mb-4">Server Information</h3>
            
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-base-content/70">Maintainer</label>
                <div class="flex items-center gap-2 mt-1">
                  <div class="avatar">
                    <div class="w-8 h-8 rounded-full">
                      <img src={parsedServer.owner_avatar} alt={parsedServer.owner_name} />
                    </div>
                  </div>
                  <span class="font-medium">{parsedServer.owner_name}</span>
                </div>
              </div>
              
              <div>
                <label class="text-sm font-medium text-base-content/70">Last Updated</label>
                <p class="mt-1">{new Date(parsedServer.updated_at).toLocaleDateString()}</p>
              </div>
              
              <div>
                <label class="text-sm font-medium text-base-content/70">Server ID</label>
                <p class="mt-1 font-mono text-sm">{parsedServer.slug}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Tags -->
        {parsedServer.tags.length > 0 && (
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h3 class="card-title mb-4">Tags</h3>
              <div class="flex flex-wrap gap-2">
                {parsedServer.tags.map(tag => (
                  <a 
                    href={`/servers?tag=${encodeURIComponent(tag)}`}
                    class="badge badge-outline hover:badge-primary"
                  >
                    {tag}
                  </a>
                ))}
              </div>
            </div>
          </div>
        )}

        <!-- Stats -->
        <div class="card bg-base-100 shadow-xl">
          <div class="card-body">
            <h3 class="card-title mb-4">Statistics</h3>
            <div class="stats stats-vertical">
              <div class="stat">
                <div class="stat-title">GitHub Stars</div>
                <div class="stat-value text-primary">{parsedServer.stars}</div>
              </div>
              <div class="stat">
                <div class="stat-title">Forks</div>
                <div class="stat-value text-secondary">{parsedServer.forks}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Convert markdown to HTML (simple implementation)
  document.addEventListener('DOMContentLoaded', () => {
    const readmeContent = document.getElementById('readme-content');
    if (readmeContent) {
      // Simple markdown parsing - in a real app you'd use a proper markdown parser
      let content = readmeContent.textContent;
      
      // Headers
      content = content.replace(/^### (.*$)/gm, '<h3 class="text-lg font-semibold mt-6 mb-3">$1</h3>');
      content = content.replace(/^## (.*$)/gm, '<h2 class="text-xl font-semibold mt-8 mb-4">$1</h2>');
      content = content.replace(/^# (.*$)/gm, '<h1 class="text-2xl font-bold mt-8 mb-4">$1</h1>');
      
      // Bold and italic
      content = content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      content = content.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // Links
      content = content.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2" class="link link-primary" target="_blank" rel="noopener noreferrer">$1</a>');
      
      // Code blocks
      content = content.replace(/```([\s\S]*?)```/g, '<pre class="bg-base-200 p-4 rounded-lg overflow-x-auto"><code>$1</code></pre>');
      content = content.replace(/`([^`]+)`/g, '<code class="bg-base-200 px-2 py-1 rounded">$1</code>');
      
      // Line breaks
      content = content.replace(/\n/g, '<br>');
      
      readmeContent.innerHTML = content;
    }
  });

  function shareServer() {
    if (navigator.share) {
      navigator.share({
        title: document.title,
        text: document.querySelector('meta[name="description"]')?.content || '',
        url: window.location.href
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        showToast('URL copied to clipboard!', 'success');
      });
    }
  }

  function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast toast-top toast-end`;
    toast.innerHTML = `
      <div class="alert alert-${type === 'success' ? 'success' : 'error'}">
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.remove();
    }, 3000);
  }
</script> 